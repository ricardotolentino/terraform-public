name: 'Resusable workflow - Terraform plan and apply'

on:
  workflow_call:
    inputs:
      environment_apply:
        required: true
        type: string
      environment_plan:
        required: true
        type: string
      runs_on:
        required: false
        type: string
        #default: self-hosted
        #default: windows-latest
        default: ubuntu-latest
      terraform_version:
        required: false
        type: string
        default: '1.9'
      working_directory:
        required: true
        type: string

jobs:
  job-terraform-plan:
    name: 'Terraform Plan'
    env:
      #ARM_USE_MSI: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_SPN_APP_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_SPN_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      tf_plan_path: ${{ github.workspace }}/tfplan
      tf_plan_text_path: ${{ github.workspace }}/tfplan.txt
      #tf_plan_artifact_name: tfplan_${{ github.run_number }}
      #tf_plan_text_artifact_name: tfplantext_${{ github.run_number }}
    runs-on: ${{ inputs.runs_on }}
    #runs-on:
    #  labels: [dev]
    environment: ${{ inputs.environment_plan }}
    outputs:
      terraform_plan_exitcode: ${{ steps.step-terraform-plan.outputs.exitcode }}

    defaults:
      run:
        shell: bash   # setup-terraform requires bash
        working-directory: ${{ inputs.working_directory }}

    steps:
    - uses: actions/checkout@v4
      name: Checkout

    - name: Set artifact environment variables
      run: |
        # Replace all spaces in the workflow name with underscores
        workflow_name=$(echo "$GITHUB_WORKFLOW" | sed 's/ /_/g')

        artifact_suffix="${workflow_name}_${GITHUB_RUN_NUMBER}"
        plan_artifact_name="tfplan_${artifact_suffix}"
        plan_artifact_text_name="tfplantext_${artifact_suffix}"

        # Set the environment variables
        echo "tf_plan_artifact_name=$plan_artifact_name" >> $GITHUB_ENV
        echo "tf_plan_text_artifact_name=$plan_artifact_text_name" >> $GITHUB_ENV

    - uses: hashicorp/setup-terraform@v3
      name: Setup Terraform '${{ inputs.terraform_version }}'
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false  # Set to false for `plan -detailed-exitcode` to work

#    - name: Configure access to private GitHub repo
#      run: git config --global url."https://oauth2:${{ secrets.GITHUB_TOKEN }}@github.com".insteadOf https://github.com

#    - name: az login
#      uses: azure/login@v2
#      with:
#        auth-type: IDENTITY
#        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform init
      run: |
        terraform init

    - name: Terraform format
      run: |
        terraform fmt -check

    - name: Terraform validate
      run: |
        terraform validate -no-color

# PowerShell
#    - name: Terraform plan
#      id: step-terraform-plan
#      shell: pwsh
#      run: |
#        terraform plan -detailed-exitcode -no-color -out $env:tf_plan_path
#        $ExitCode = $LASTEXITCODE
#
#        "exitcode=$ExitCode" >> $env:GITHUB_OUTPUT
#
#        if ($ExitCode -eq 1) {
#            Write-Output "::error Error with Terraform plan"
#            exit 1
#        }
#        else {
#            exit 0
#        }

    - name: Terraform plan
      id: step-terraform-plan
      run: |
        set +e
        terraform plan -detailed-exitcode -no-color -out "$tf_plan_path"
        exit_code="$?"

        echo "exitcode=$exit_code" >> "$GITHUB_OUTPUT"

        if [[ "$exit_code" -eq 1 ]]; then
          echo "::error::Error with Terraform plan"
          exit 1
        else
          exit 0
        fi

# PowerShell
#    - name: Terraform show
#      shell: pwsh
#      run: |
#        terraform show -no-color $env:tf_plan_path > $env:tf_plan_text_path

    - name: Terraform show
      run: |
        terraform show -no-color "$tf_plan_path" > "$tf_plan_text_path"

    - name: Publish tfplan
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.tf_plan_artifact_name }}
        path: ${{ env.tf_plan_path }}

    - name: Publish tfplan.txt
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.tf_plan_text_artifact_name }}
        path: ${{ env.tf_plan_text_path }}

  job-terraform-apply:
    name: 'Terraform Apply'
    if: needs.job-terraform-plan.outputs.terraform_plan_exitcode == 2
    env:
      #ARM_USE_MSI: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_SPN_APP_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_SPN_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #tf_plan_text_artifact_name: tfplantext_${{ github.run_number }}
      tf_plan_text_artifact_path: ${{ github.workspace }}/tfplan.txt
      tf_apply_plan_path: ${{ github.workspace }}/tfplan_apply
      tf_apply_plan_text_path: ${{ github.workspace }}/tfplan_apply.txt
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment_apply }}
    needs: [job-terraform-plan]

    defaults:
      run:
        shell: bash   # setup-terraform requires bash
        working-directory: ${{ inputs.working_directory }}

    steps:
    - uses: actions/checkout@v4
      name: Checkout

    - name: Set artifact environment variables
      run: |
        # Replace all spaces in the workflow name with underscores
        workflow_name=$(echo "$GITHUB_WORKFLOW" | sed 's/ /_/g')

        artifact_suffix="${workflow_name}_${GITHUB_RUN_NUMBER}"
        plan_artifact_name="tfplan_${artifact_suffix}"
        plan_artifact_text_name="tfplantext_${artifact_suffix}"

        # Set the environment variables
        echo "tf_plan_artifact_name=$plan_artifact_name" >> $GITHUB_ENV
        echo "tf_plan_text_artifact_name=$plan_artifact_text_name" >> $GITHUB_ENV

    - uses: hashicorp/setup-terraform@v3
      name: Setup Terraform '${{ inputs.terraform_version }}'
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false

#    - name: Configure access to private GitHub repo
#      run: git config --global url."https://oauth2:${{ secrets.GITHUB_TOKEN }}@github.com".insteadOf https://github.com

    - name: Terraform init
      run: |
        terraform init

# PowerShell
#    - name: Terraform plan
#      shell: pwsh
#      run: |
#        terraform plan -no-color -out $env:tf_apply_plan_path

    - name: Terraform plan
      run: |
        terraform plan -no-color -out "$tf_apply_plan_path"

# PowerShell
#    - name: Terraform show
#      shell: pwsh
#      run: |
#        terraform show -no-color $env:tf_apply_plan_path > $env:tf_apply_plan_text_path

    - name: Terraform show
      run: |
        terraform show -no-color "$tf_apply_plan_path" > "$tf_apply_plan_text_path"

    - uses: actions/download-artifact@v4
      name: Download plan artifact from Terraform plan job
      with:
        name: ${{ env.tf_plan_text_artifact_name }}
        path: ${{ github.workspace }}

# PowerShell
#    - name: Validate plan is current
#      shell: pwsh
#      run: |
#        # Compare the plan text file (from this job) with the artifact plan text file (from the plan job).
#        # Continue if both plan text files are the same.
#        # Throw an error if there's a difference, indicating there has been a change in Azure since the plan was created.
#        fc.exe $env:tf_apply_plan_text_path $env:tf_plan_text_artifact_path
#
#        # Use fc.exe exit code, which will be True if the files are the same
#        if (-Not ($?)) {
#          Write-Output "##[error]Terraform plan is out-of-date. The Azure resources involved in the plan have been modified since the plan was generated. Run this workflow again to generate a new Terraform plan."
#          exit 1
#        }

    - name: Validate plan is current
      run: |
        set +e
        # Compare the plan text file (from this job) with the artifact plan text file (from the plan job).
        # Continue if both plan text files are the same.
        # Throw an error if there's a difference, indicating there has been a change in Azure since the plan was created.
        diff "$tf_apply_plan_text_path" "$tf_plan_text_artifact_path"
        exit_code="$?"

        # Use dff exit code, which will be 0 if the files are the same, 1 if not
        if [[ "$exit_code" -eq 1 ]]; then
          echo "::error::Terraform plan is out-of-date. The Azure resources involved in the plan have been modified since the plan was generated. Run this workflow again to generate a new Terraform plan."
          exit 1
        else
          exit 0
        fi

    - name: Azure login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_SPN_APP_ID }}","clientSecret":"${{ secrets.AZURE_SPN_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Remove resource locks
      run: |
        # Select the Azure resources that are planned for an "update" or "delete"
        # ("create" can be ignored, since the resource doesn't have a lock yet)
        resource_ids=$(terraform show -no-color -json "$tf_apply_plan_path" | jq -r '.resource_changes[] | select((.change.actions[0]=="update" or .change.actions[0]=="delete") and (.type | startswith("azurerm_"))) | .change.before.id')

        # Iterate over each resource ID, and delete all locks (including locks not managed by Terraform)
        for resource_id in $resource_ids; do
            echo "Listing locks for '$resource_id' ..."
            for lock_id in $(az lock list --resource "$resource_id" --query "[].id" -o tsv); do
                echo "Deleting lock '$lock_id' ..."
                az lock delete --ids "$lock_id"
            done
        done

    - name: Terraform apply
      run: |
        # Don't use the plan, which will not recreate the deleted resource locks
        terraform apply -auto-approve -input=false